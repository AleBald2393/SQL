Q1: Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.

SELECT S.NAME_OF_SCHOOL, S.COMMUNITY_AREA_NAME, S.AVERAGE_STUDENT_ATTENDANCE 
FROM chicago_public_schools AS S 
LEFT OUTER JOIN chicago_socioeconomic_data AS D 
ON S.COMMUNITY_AREA_NAME = D.COMMUNITY_AREA_NAME 
WHERE D.HARDSHIP_INDEX=98;

Q2: Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.
SELECT C.CASE_NUMBER, C.PRIMARY_TYPE, D.COMMUNITY_AREA_NAME
FROM chicago_crime AS C
LEFT OUTER JOIN chicago_socioeconomic_data AS D 
ON C.COMMUNITY_AREA_NUMBER = D.COMMUNITY_AREA_NUMBER 
WHERE C.LOCATION_DESCRIPTION LIKE "%SCHOOL%";

Q3: Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.
CREATE OR REPLACE VIEW PublicSchools AS
SELECT NAME_OF_SCHOOL AS School_Name, Safety_Icon AS Safety_Rating, Family_Involvement_Icon	AS Family_Rating,
Environment_Icon AS	Environment_Rating, Instruction_Icon AS	Instruction_Rating, Leaders_Icon AS	Leaders_Rating,
Teachers_Icon AS Teachers_Rating
FROM chicago_public_schools;

Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.
DELIMITER //
CREATE OR PROCEDURE UPDATE_LEADERS_SCORE (IN School_ID INTEGER, IN Leaders_Score INTEGER)
END //
DELIMITER;
